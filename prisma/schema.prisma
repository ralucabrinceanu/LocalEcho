generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Venues {
  id       String   @id @default(uuid())
  name     String
  address  String
  capacity Int
  city     String
  zipCode  String?  @map("zip_code")
  events   Events[]

  @@map("venues")
}

model Users {
  id             String    @id @default(uuid())
  firstName      String    @map("first_name")
  lastName       String    @map("last_name")
  avatar         String?
  avatarPublicId String?   @map("avatar_id")
  email          String    @unique
  password       String
  role           Role[]    @default([USER])
  ratings        Ratings[]
  reviews        Reviews[]
  events         Events[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  EVENT_PLANNER
}

model Events {
  id            String        @id @default(uuid())
  title         String
  description   String?
  date          DateTime
  ratings       Ratings[]
  reviews       Reviews[]
  averageRating Float?        @default(0)
  venue         Venues?       @relation(fields: [venueId], references: [id], onDelete: SetNull)
  venueId       String?       @map("venue_id")
  eventStatus   EventStatus   @default(SCHEDULED) @map("event_status")
  eventCategory EventCategory @default(FAMILY_AND_KIDS) @map("event_category")
  createdBy     Users?        @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById   String?       @map("created_by")

  @@map("events")
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum EventCategory {
  MUSIC
  ART_AND_CULTURE
  FOOD_AND_DRINK
  FAMILY_AND_KIDS
  CHARITY
  HEALTH_AND_WELLNESS
}

model Ratings {
  id          String @id @default(uuid())
  event       Events @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String @map("event_id")
  value       Int
  createdBy   Users  @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String @map("created_by")

  @@map("ratings")
}

model Reviews {
  id          String @id @default(uuid())
  event       Events @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String @map("event_id")
  content     String
  createdBy   Users  @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String @map("created_by")

  @@map("reviews")
}
