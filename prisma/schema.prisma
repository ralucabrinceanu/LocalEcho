generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Venues {
  id          String   @id @default(uuid())
  name        String
  address     String
  capacity    Int
  city        String
  zipCode     String?  @map("zip_code")
  events      Events[]
  createdBy   Users?   @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?  @map("created_by")

  @@map("venues")
}

model Users {
  id                          String    @id @default(uuid())
  firstName                   String    @map("first_name")
  lastName                    String    @map("last_name")
  avatar                      String?
  avatarPublicId              String?   @map("avatar_id")
  email                       String    @unique
  password                    String
  role                        Role[]    @default([USER])
  reviews                     Reviews[]
  events                      Events[]
  verificationToken           String?   @map("verification_token")
  isVerified                  Boolean?  @default(false) @map("is_verified")
  verified                    DateTime?
  passwordToken               String?   @map("password_token")
  passwordTokenExpirationDate DateTime? @map("psd_token_exp")
  Venues                      Venues[]
  Tickets                     Tickets[]
  Orders                      Orders[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  EVENT_PLANNER
}

model Events {
  id            String        @id @default(uuid())
  title         String
  description   String?
  startDate     DateTime      @map("start_date")
  endDate       DateTime      @map("end_date")
  venue         Venues?       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId       String?       @map("venue_id")
  eventStatus   EventStatus   @default(SCHEDULED) @map("event_status")
  eventCategory EventCategory @default(FAMILY_AND_KIDS) @map("event_category")
  image         String?
  imagePublicId String?       @map("image_id")
  createdAt     DateTime?     @map("created_at")
  createdBy     Users?        @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById   String?       @map("created_by")
  Tickets       Tickets[]

  @@map("events")
}

enum EventStatus {
  SCHEDULED
  RIGHT_NOW
  COMPLETED
  CANCELLED
}

enum EventCategory {
  MUSIC
  ART_AND_CULTURE
  FOOD_AND_DRINK
  FAMILY_AND_KIDS
  CHARITY
  HEALTH_AND_WELLNESS
}

model Tickets {
  id               String            @id @default(uuid())
  event            Events?           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String?           @map("event_id")
  ticketType       TicketType        @map("ticket_type")
  ticketsAvailable Int               @map("tickets_available")
  price            Int               @default(0)
  createdBy        Users?            @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById      String?           @map("created_by")
  SingleOrderItem  SingleOrderItem[]

  @@map("tickets")
}

enum TicketType {
  NO_TICKET
  GENERAL
  STUDENT
  SENIOR
}

model Reviews {
  id          String    @id @default(uuid())
  rating      Int?
  content     String?
  createdAt   DateTime? @map("created_at")
  createdBy   Users     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String    @map("created_by")

  @@map("reviews")
}

model SingleOrderItem {
  id       String  @id @default(uuid())
  price    Int
  amount   Int
  ticket   Tickets @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String  @map("ticket_id")
  order    Orders  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String  @map("order_id")
}

model Orders {
  id              String            @id @default(uuid())
  total           Int
  clientSecret    String            @map("client_secret")
  paymentIntentId String?
  orderItems      SingleOrderItem[]
  createdAt       DateTime          @default(now())
  status          OrderStatus       @default(PENDING) @map("order_status")
  orderedBy       Users?            @relation(fields: [orderedById], references: [id], onDelete: SetNull)
  orderedById     String?           @map("created_by")

  @@map("orders")
}

enum OrderStatus {
  PENDING
  FAILED
  PAID
  DELIVERED
  CANCEL
}
